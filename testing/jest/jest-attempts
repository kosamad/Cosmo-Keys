
//were present in cosmo-game.js file
// module.exports = {
// 	addition,
// 	findWords,
// 	levelTwo,
// 	handleInput,
// 	playerTurn,
// 	matchCheck,
// 	startGame,
// 	startTimer,
// 	computerTurn,
// 	};


//head of jest file 
/**
 * @jest-environment jsdom
 */

// const { findWords, levelTwo, handleInput, playerTurn, matchCheck, startGame,
//     startTimer, computerTurn } = require("../cosmo-game.js");

// describe("comuter turn works correctly", () => {
//     beforeAll(() => {
//       compTurn = true;
//       const levelTwo = jest.fn();
//       const message = document.createElement('div');
//       document.getElementById = jest.fn(() => message); 
//         });
//     test("if level id equals level two should initiate level two function", () => {
//       const levelId = 'level-2'
//       computerTurn();       
//       expect(levelTwo).toHaveBeenCalled();
//     });
//   });


//testing level 2 play

// describe('findWords function', () => {
//     beforeEach(() => {
//       // Mock the fetch function as jest shouldn't use the API. jest.fn creates a jest mock function//for readme modified from https://salesforce.stackexchange.com/questions/402849/how-to-use-fetch-in-jest-javascript-test
//       global.fetch = jest.fn(() => Promise.resolve({
//         json: () => Promise.resolve([{ word: 'ab' }, { word: 'cd' }]),
//       }));
//     });
//     test('fetches two-letter words from the API', async () => {
//       twoLetterWords = await findWords();
//       expect(twoLetterWords).toEqual(['ab', 'cd']);
//     });
//   });


//   describe("levelTwo works correctly", () => {
//     beforeEach(() => {
//       let currentLetter = 'up';
//       twoLetterWords = ['up', 'on', 'in', 'to',] ;   
//       });
//     test("level two function", () => {
//       levelTwo();
//       const innerText = currentLetter.innerText.trim();
//       expect(twoLetterWords).toContain(innerText);  
//     });
//   });

// describe("Level Two function", () => {
//   document.body.innerHTML = '<div id="player-answer" contenteditable="true"></div>';
//   const playerAnswer = document.getElementById('player-answer');
//   const mockEvent = { type: 'input' };
//   // Spy on the matchCheck function
//   const spyMatchCheck = jest.spyOn(window, 'matchCheck');
//   beforeEach(() => {
//     // Reset variables or any setup needed
//     lettersTyped = 0;
//     compTurn = false;
//   });

//   test("Does the computer wait for two letters to be types before calling matchCheck in levelTwo play", () => {
//     levelId = 'level-2';
//     playerAnswer.addEventListener('input', handleInput);
//      // Trigger the input event twice
//      playerAnswer.dispatchEvent(new Event('input',mockEvent));
//      playerAnswer.dispatchEvent(new Event('input',mockEvent));
//       // Check if matchCheck is called after two letters are typed
//       expect(spyMatchCheck).toHaveBeenCalledTimes(1);
//   });
//   afterEach(() => {
//     spyMatchCheck.mockRestore();
// });
// });

// describe('levelTwo function works to use the random index and fill my quiz box with two letters', () => {
//   beforeEach(() => {
//     // Mock the fetch function as jest shouldn't use the API. jest.fn creates a jest mock function//for readme modified from https://salesforce.stackexchange.com/questions/402849/how-to-use-fetch-in-jest-javascript-test
//     global.fetch = jest.fn(() => Promise.resolve({
//       json: () => Promise.resolve([{ word: 'ab' }, { word: 'cd' }]),
//     }));
//   });
//   test('one random 2 letter string is stored in the current letter box', async () => {
//     await levelTwo();  
//     const currentLetterTest = currentLetter.innerHTML.trim();
//     expect(['ab', 'cd']).toContain(currentLetterTest);    
//   });
// }); 